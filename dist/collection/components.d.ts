/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import { AmeEdit as AmeEdit } from './components/ame-edit/ame-edit';

interface HTMLAmeEditElement extends AmeEdit, HTMLElement {
}
declare var HTMLAmeEditElement: {
  prototype: HTMLAmeEditElement;
  new (): HTMLAmeEditElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ame-edit": HTMLAmeEditElement;
  }
  interface ElementTagNameMap {
      "ame-edit": HTMLAmeEditElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ame-edit": JSXElements.AmeEditAttributes;
      }
  }
  namespace JSXElements {
      export interface AmeEditAttributes extends HTMLAttributes {
        
      }
  }
}

import { AmeHandler as AmeHandler } from './components/ame-handler/ame-handler';

interface HTMLAmeHandlerElement extends AmeHandler, HTMLElement {
}
declare var HTMLAmeHandlerElement: {
  prototype: HTMLAmeHandlerElement;
  new (): HTMLAmeHandlerElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ame-handler": HTMLAmeHandlerElement;
  }
  interface ElementTagNameMap {
      "ame-handler": HTMLAmeHandlerElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ame-handler": JSXElements.AmeHandlerAttributes;
      }
  }
  namespace JSXElements {
      export interface AmeHandlerAttributes extends HTMLAttributes {
        
          save?: any,
          handlerName?: any
      }
  }
}

import { AmeRichText as AmeRichText } from './components/ame-rich-text/ame-rich-text';

interface HTMLAmeRichTextElement extends AmeRichText, HTMLElement {
}
declare var HTMLAmeRichTextElement: {
  prototype: HTMLAmeRichTextElement;
  new (): HTMLAmeRichTextElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ame-rich-text": HTMLAmeRichTextElement;
  }
  interface ElementTagNameMap {
      "ame-rich-text": HTMLAmeRichTextElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ame-rich-text": JSXElements.AmeRichTextAttributes;
      }
  }
  namespace JSXElements {
      export interface AmeRichTextAttributes extends HTMLAttributes {
        
          value?: any,
          editable?: boolean | "true" | "false"
      }
  }
}

import { AmeSave as AmeSave } from './components/ame-save/ame-save';

interface HTMLAmeSaveElement extends AmeSave, HTMLElement {
}
declare var HTMLAmeSaveElement: {
  prototype: HTMLAmeSaveElement;
  new (): HTMLAmeSaveElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ame-save": HTMLAmeSaveElement;
  }
  interface ElementTagNameMap {
      "ame-save": HTMLAmeSaveElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ame-save": JSXElements.AmeSaveAttributes;
      }
  }
  namespace JSXElements {
      export interface AmeSaveAttributes extends HTMLAttributes {
        
      }
  }
}

import { AmeText as AmeText } from './components/ame-text/ame-text';

interface HTMLAmeTextElement extends AmeText, HTMLElement {
}
declare var HTMLAmeTextElement: {
  prototype: HTMLAmeTextElement;
  new (): HTMLAmeTextElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ame-text": HTMLAmeTextElement;
  }
  interface ElementTagNameMap {
      "ame-text": HTMLAmeTextElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ame-text": JSXElements.AmeTextAttributes;
      }
  }
  namespace JSXElements {
      export interface AmeTextAttributes extends HTMLAttributes {
        
          value?: any,
          editable?: boolean | "true" | "false"
      }
  }
}

